#!/bin/bash

set -e

install_collection() {
    xdc="$1"
    ssh "$xdc" "sudo apt install -y git"
    ssh "$xdc" "git clone https://github.com/BlankCanvasStudio/collection.git collection"
}

verify_collection_install() {
    xdc="$1"
    exists=$(ssh "$xdc" '[ -d collection ] && echo "File exists" || echo "File does not exist"')
    if [ "$exists" = "File does not exist" ]; then 
        install_collection "$xdc";
    else
        execute "$xdc" "git pull"
    fi

}

execute() {
    xdc="$1"
    shift
    ssh "$xdc" "cd collection && $@"
}

build_experiment() {
    xdc="$1"
    shift
    echo "executing './startexp -s $@' on $xdc"
    execute "$xdc" "./startexp -s $@"
}

exfiltrate_data() {
    xdc="$1"
    dest="$2"
    iter="$3"
    
    final_resting="$destination/$iter"

    # Save the data to the xdc
    execute "$xdc" "./util/download/databases.sh"
    # Make folder to save data in
    mkdir -p "$final_resting"
    # Download the data to the current machine
    echo ""
    echo "moving to dump to local machine"
    echo ""
    scp "$xdc:~/postgres-data.sql" "$final_resting"
    scp "$xdc:~/influx-data.tar.gz" "$final_resting"
}

clear_text_files() {
    xdc=$1

    nodes=$(execute "$xdc" ./util/list-nodes.sh)

    for node in $nodes; do
        location="/var/log/discern/data"
        execute $xdc "ssh $node 'sudo rm -rf $location/*'"
    done
}

update_bash_sweep() {
    xdc=$1
    nodes=$(execute "$xdc" ./util/list-nodes.sh)
    bash_loc="/var/log/discern/data/bash-data.txt"
    cmd="sudo sed -i \'s_^bashsweepinterval: 60_bashsweepinterval: 10_\' $bash_loc"

    for node in $nodes; do
        # echo "execute $xdc 'ssh $node $cmd'"
        execute $xdc "ssh $node $cmd"
        execute $xdc "ssh $node 'sudo systemctl restart discern-bash-dump'"
    done
}

exfiltrate_text_files() {
    xdc=$1
    destination=$2
    iteration=$3

    final_resting="$destination/$iter"

    nodes=$(execute "$xdc" ./util/list-nodes.sh)

    for node in $nodes; do
        location="/var/log/discern/data"
        execute $xdc "scp -r $node:$location ~/$node-data"
        scp -r "$xdc:~/$node-data" "$final_resting"
    done
}

restart_sorcerers() {
    nodes=$(execute "$xdc" ./util/list-nodes.sh)

    for node in $nodes; do
        execute $xdc "ssh $node 'sudo systemctl restart discern-proc'"
        execute $xdc "ssh $node 'sudo systemctl restart discern-file'"
    done
}

show_help() {
    echo ""
    echo "Usage: ./orchestration/run [flags] <xdc> <iterations> <save data location> <experiment name>"
    echo ""
    echo "This command automates taking experiment data and saving it to the local machine"
    echo "startexp is meant to run on the XDC. This is runs on a local computer than can ssh into the xdc, wraps startexp, and exfiltrates the data"
    echo ""
    echo "-h/--help shows this menu"
    echo "-f/--fresh re-materializes on every iteration. This is very costly and slow. Its not recommended"
    echo ""
    echo "xdc:             is the xdc you'd like to run the experiment through"
    echo "iterations:      is how many number of data points you'd like to collect"
    echo "location:        is where you'd like to save the data (in folders numbered after their iteration)"
    echo "experiment name: the name of the experiment you'd like to run (synflood, dnsmitm, etc)"
    echo ""
}


xdc=""
commands=""
iterations=""
destination=""
fresh=false


while [[ $# -gt 0 ]]; do
    case "$1" in
        -h | --help)
            show_help
            shift
            ;;

        -f | --fresh)
            fresh=true
            shift
            ;;

        -x)
            shift
            xdc="$1"
            shift
            ;;
        -i)
            shift
            iterations="$1"
            shift
            ;;
        -d) 
            shift
            destination="$1"
            shift
            ;;
        *)
            if [ "$xdc" = "" ]; then
                xdc="$1"
            elif [ "$iterations" = "" ]; then
                iterations="$1"
            elif [ "$destination" = "" ]; then
                destination="$1"
            else 
                command="$1"
                while [[ $# -gt 1 ]]; do shift; done
            fi
            shift
            ;;
    esac
done


if [ "$xdc" = "" ]; then
    echo "please specify an xdc"
    exit 1
elif [ "$iterations" = "" ]; then
    echo "please specify a number of iterations"
    exit 1
elif [ "$destination" = "" ]; then
    echo "please specify a destination for the data"
    exit 1
elif [ "$command" = "" ]; then
    echo "please specify the experiment to run on the xdc"
    exit 1
fi


# Verify all the software is on the XDC
verify_collection_install "$xdc"

execute "$xdc" "/share/stopexp $command"

# Make the folder to save the data in
mkdir -p "$destination"

if [ "$fresh" = "false" ]; then
    # Build the experiment from the xdc
    build_experiment "$xdc" "$command"
    # update_bash_sweep "$xdc"
fi


for (( i = 0; i < $iterations; i++ )); do
    # Possibly build the experiment for each iteration
    if [ "$fresh" = "true" ]; then
        # Build the experiment from the xdc
        build_experiment "$xdc" "$command"
        # update_bash_sweep "$xdc"
    fi

    # Empty the databases, just in case
    execute "$xdc" "./util/empty-databases.sh 'fusioncore'"
    clear_text_files "$xdc" 
    restart_sorcerers

    # Run an iteration of the experiment
    echo "running experiment loop"
    (execute "$xdc" "./experiments/$command/run")

    # Save the data to the local machine
    echo "exfiltrating data..."
    exfiltrate_data "$xdc" "$destination" "$i"
    exfiltrate_text_files "$xdc" "$destination" "$i"

    # If there are any end of experiment comamnds to run that you don't want record
    if [ -f ./experiments/$command/end ]; then
        execute "$xdc" ./experiments/$command/end
    fi

    # Empty the databases so we don't save a bunch of old data repeatedly
    echo "emptying databases..."
    execute "$xdc" "./util/empty-databases.sh 'fusioncore'"

    # Remove empty files
    execute "$xdc" 'rm -r ~/FusionCore.deb ~/Sorcerers.deb ~/*-data/ ~/influx-data.tar.gz ~/postgres-data.sql || true'

    # Decommission if we are running fresh
    if [ "$fresh" = "true" ]; then
        execute "$xdc" "/share/stopexp $command"
    fi
done

# Decommission if we aren't running fresh
if [ "$fresh" = "false" ]; then
    execute "$xdc" "/share/stopexp $command"
fi

echo "done running experiments"

